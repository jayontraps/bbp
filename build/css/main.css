/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

body {
  font-family: "Futura W01 Book", Verdana, "Verdana Ref", sans-serif;
  color: #5B5C5D;
  font-size: 16px;
  letter-spacing: 0.06em; }

ul.category-nav, ul.topmenu {
  font-family: "Futura W01 Medium";
  text-transform: uppercase;
  font-size: 1em; }

.intro p {
  margin-bottom: 20px; }

.intro a {
  color: #372A76; }
  .intro a:hover {
    text-decoration: underline; }

* {
  box-sizing: border-box; }

ul {
  margin: 0;
  padding: 0;
  list-style: none; }

img {
  max-width: 100%; }

a {
  color: #5B5C5D;
  text-decoration: none; }
  a:hover {
    text-decoration: none; }

.wrapper {
  width: 90%;
  margin: 0 auto; }
  @media (min-width: 1120px) {
    .wrapper {
      width: 100%;
      max-width: 1120px; } }

.main {
  padding-bottom: 60px;
  position: relative; }

.main-image {
  display: block;
  width: 100%;
  float: none;
  margin: 0 auto 30px auto; }
  @media (min-width: 768px) {
    .main-image {
      width: 50%;
      float: right;
      margin: 0; } }

.intro {
  width: 100%;
  margin: 0 auto;
  float: none; }
  @media (min-width: 768px) {
    .intro {
      width: 40%;
      float: left; } }

.logo {
  clear: both;
  width: 100%;
  max-width: 250px;
  margin: 10px auto 30px auto; }
  .logo a {
    display: block;
    width: 100%; }

footer {
  clear: both;
  border-top: 1px solid #999;
  padding: 20px 0;
  margin: 20px 0; }

ul.footerNav li {
  margin-bottom: 20px; }

/* -----------------------------------------
   Navigation Styles
----------------------------------------- */
.nav {
  list-style: none;
  margin-left: 0; }
  .nav > li,
  .nav > li > a {
    display: inline-block;
    *display: inline;
    zoom: 1;
    text-decoration: none; }
    .nav > li :hover,
    .nav > li > a :hover {
      text-decoration: none; }

/* -----------------------------------------
   topmenu
----------------------------------------- */
.topmenu {
  width: 100%;
  margin: 20px 0 0 0; }
  .topmenu li {
    float: right;
    margin-left: 20px;
    font-size: .8em; }
  .topmenu a {
    color: #372A76; }
    .topmenu a:hover {
      text-decoration: underline; }

@media only screen and (min-width: 800px) {
  ul.topmenu li {
    font-size: 1.2em; } }

.sm-screen ul.topmenu {
  width: 90%;
  margin: 10px auto 20px auto; }

.category-nav {
  padding: 20px 0 30px 0;
  border-top: 1px solid #999;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between; }

.category-nav--link {
  padding: 10px 0;
  border-bottom: 2px solid #FFF; }
  .category-nav--link:hover {
    border-bottom: 2px solid #5B5C5D; }
  .category-nav--link.linkCat1.on {
    color: #BC62C6;
    border-bottom: 2px solid #BC62C6; }
  .category-nav--link.linkCat2.on {
    color: #794D06;
    border-bottom: 2px solid #794D06; }
  .category-nav--link.linkCat3.on {
    color: #FBBD12;
    border-bottom: 2px solid #FBBD12; }
  .category-nav--link.linkCat4.on {
    color: #2F91F6;
    border-bottom: 2px solid #2F91F6; }
  .category-nav--link.linkCat5.on {
    color: #97CD2D;
    border-bottom: 2px solid #97CD2D; }

.col-1 {
  width: 100%; }
  @media (min-width: 800px) {
    .col-1 {
      width: 35%;
      float: left; } }

.col-2 {
  display: none; }
  @media (min-width: 800px) {
    .col-2 {
      display: block;
      width: 60%;
      min-height: 624px;
      float: right; } }

@media (min-width: 800px) {
  .gallery-list {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between; } }

.gallery-item {
  width: 100%;
  max-width: 320px;
  margin: 0 auto;
  float: none;
  position: relative;
  display: none; }
  .gallery-item.cat1 {
    display: block; }
  .gallery-item a.details-btn {
    display: block; }
  .gallery-item .gallery-item-info {
    display: none; }
  @media (min-width: 800px) {
    .gallery-item {
      width: 115px;
      margin: 0 0 1rem 0;
      padding: 0;
      float: left;
      position: relative; }
      .gallery-item a.details-btn {
        display: none; } }

.gallery-item-wrapper {
  position: relative;
  width: 100%;
  max-width: 320px;
  z-index: 1; }

.lg-screen .gallery-thumbnail {
  border: 2px solid #fff;
  z-index: 1; }
  .lg-screen .gallery-thumbnail:hover {
    cursor: pointer;
    opacity: 0.5; }
  .lg-screen .gallery-thumbnail.active {
    opacity: 0.5; }

.gallery-thumbnail.cat1 {
  border: 2px solid #BC62C6; }

.gallery-thumbnail.cat2 {
  border: 2px solid #794D06; }

.gallery-thumbnail.cat3 {
  border: 2px solid #FBBD12; }

.gallery-thumbnail.cat4 {
  border: 2px solid #2F91F6; }

.gallery-thumbnail.cat5 {
  border: 2px solid #97CD2D; }

.image-outer-wrap {
  position: relative;
  overflow: auto; }

.imgWrap .frame {
  display: block;
  float: right;
  border: 2px solid #fff; }

.loading {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: url(../../images/ajax-loader.gif) 50% 50% no-repeat transparent;
  z-index: 9; }

.gallery-item-info {
  position: absolute;
  padding: 0;
  margin: 0;
  top: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 5%;
  color: #FFF;
  background-color: #333;
  opacity: 0.9;
  text-align: left;
  display: none; }
  .gallery-item-info.on {
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
    -webkit-justify-content: center;
        -ms-flex-pack: center;
            justify-content: center; }
    @media (min-width: 800px) {
      .gallery-item-info.on {
        display: none; } }

@media (min-width: 800px) {
  .infoBox .gallery-item-info {
    bottom: 60px;
    height: auto;
    width: 400px;
    top: auto;
    background-color: transparent;
    color: #5B5C5D;
    padding: 0;
    margin: 0;
    display: block; } }

.gallery-item-metainfo div {
  padding-top: 1em; }

.gallery-item-title {
  font-family: "Futura W01 Medium";
  text-transform: uppercase;
  font-size: 1.2em; }
  .gallery-item-title.catOne {
    color: #BC62C6; }
  .gallery-item-title.catTwo {
    color: #794D06; }
  .gallery-item-title.catThree {
    color: #FBBD12; }
  .gallery-item-title.catFour {
    color: #2F91F6; }
  .gallery-item-title.catFive {
    color: #97CD2D; }

.gallery-item-metainfo div {
  padding-top: 1em; }
  .gallery-item-metainfo div.gallery-item-meta-details {
    font-size: .8em;
    line-height: 1.4em; }

.details-btn {
  display: block;
  width: 30%;
  margin: 10px auto;
  padding: 1em;
  border: 1px solid #fafafa;
  background-color: #ccc;
  text-align: center;
  text-transform: uppercase;
  color: #FFF;
  border-radius: 8px; }

.cat1 .details-btn {
  background-color: #BC62C6; }
  .cat1 .details-btn.clicked {
    background-color: #742d7c; }

.cat2 .details-btn {
  background-color: #794D06; }
  .cat2 .details-btn.clicked {
    background-color: black; }

.cat3 .details-btn {
  background-color: #FBBD12; }
  .cat3 .details-btn.clicked {
    background-color: #8b6702; }

.cat4 .details-btn {
  background-color: #2F91F6; }
  .cat4 .details-btn.clicked {
    background-color: #07529f; }

.cat5 .details-btn {
  background-color: #97CD2D; }
  .cat5 .details-btn.clicked {
    background-color: #4a6416; }

/* clear floats */
.clearfix:before, .clearfix:after {
  content: "\0020";
  display: block;
  height: 0;
  overflow: hidden; }

.clearfix:after {
  clear: both; }

.clearfix {
  zoom: 1; }

.group:after, footer:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0; }

.group, footer {
  display: inline-block;
  clear: both; }

/* start commented backslash hack \*/
* html .group, * html footer {
  height: 1%; }

.group, footer {
  display: block; }

/* close commented backslash hack */
/*------------------------------------*    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: nicolasgallagher.com/micro-clearfix-hack
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf, .nav {
  zoom: 1; }
  .cf:before, .nav:before, .cf:after, .nav:after {
    content: " ";
    display: table; }
  .cf:after, .nav:after {
    clear: both; }

/*# sourceMappingURL=data:application/json;base64, */
